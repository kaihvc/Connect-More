# Problem:
The program we will create is meant to be an artificial intelligence that is able to play competitive 2-player games. This problem has several parts to solve, including how the AI decides what move to take, how it evaluates the favorability of a particular game state, and how it will predict the player’s choices. The design of the program will allow for implementation of different games, although our project will mainly feature an interactive implementation of Connect Four to demonstrate the algorithms used.

# Design:
## Data Structures:
The program will use a directed graph in the form of a game tree to store all possible game states to a certain depth. Each node of the graph is a TreeNode class, storing:
-a unique game state struct describing the game board, 
-a vector of pointers to the node’s children, 
-the depth of the node,
-which player’s turn it is for that node
-getter functions for these data members
The current game state will be stored separately in the GameState class, which contains:
-a 2-dimensional array of chars representing the current position and identity of pieces on the board
-a function to determine whether a given move is valid
-a function which returns a vector of GameState objects representing all of the possible moves a player could make

## Program Architecture
The Driver file includes
-a master GameState object representing the current board
-an AI object that takes turns against the player
-a main function executing the game loop
The Player class includes
-a member function to take the player’s turn and update the current game board
The AI Class includes
-a public function that uses minimax to choose the most favorable move
-a private minimax function to recursively evaluate the children of the current node, to help in choosing the move
-a private heuristic function to help with the minimax evaluation

## Important components & program flow
AI getBestMove() function:
-Accepts the current GameState as a parameter
-Traverses the graph to find that game state’s children
-Recursively evaluates the heuristic of each child’s subtree. Then the function backtracks along the path that has the maximum heuristic for the AI player and the minimum heuristic for the human player on each turn.


(pseudocode taken from https://en.wikipedia.org/wiki/Minimax)

(* Initial call *)
minimax(origin, depth, TRUE)

function minimax(node, depth, maximizingPlayer) is
    if depth = 0 or node is a terminal node then
        return the heuristic value of node
    if maximizingPlayer then
        value := −∞
        for each child of node do
            value := max(value, minimax(child, depth − 1, FALSE))
        return value
    else (* minimizing player *)
        value := +∞
        for each child of node do
            value := min(value, minimax(child, depth − 1, TRUE))
        return value


Data structures:
-game board: 2D array
-graph nodes: class
	-game board
	-vector<Node> getChildren()
	-int getHeuristic()
-game tree: graph
-AI: class
	-game board getNextMove()
